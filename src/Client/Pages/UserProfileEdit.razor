@page "/userprofile/edit"
@using Microsoft.AspNetCore.Components.Authorization
@using AdventureBotUI.Client.Services
@using ReadWrite;
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject AdventureBotReadWriteService adventureBotReadWriteService

<h1>@Title UserProfile</h1>
<hr />
<AuthorizeView>
    <Authorized Context="Auth">
        <EditForm OnValidSubmit="SaveUser" EditContext="@editContext">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="FirstName" class="form-label">First Name</label>
                <div class="col-md-4">
                    <InputText class="form-control" @bind-Value="userProfile.FirstName" placeholder="FirstName" />
                </div>
                <ValidationMessage For="@(() => userProfile.FirstName)" />
            </div>
            <div class="mb-3">
                <label for="LastName" class="form-label">Last Name</label>
                <div class="col-md-4">
                    <InputText class="form-control" @bind-Value="userProfile.LastName" placeholder="LastName" />
                </div>
                <ValidationMessage For="@(() => userProfile.LastName)" />
            </div>
            <div class="mb-3">
                <label for="Email" class="form-label">Email</label>
                <div class="col-md-4">
                    <InputText class="form-control" @bind-Value="userProfile.EmailEntry" placeholder="jdoe@gmail.com" />
                </div>
                <ValidationMessage For="@(() => userProfile.EmailEntry)" />
            </div>
            <div class="mb-3">
                <label for="ReceiveGameAdvanceEmail" class="form-label">Receive Email Notifications</label>
                <div class="col-md-4">
                    <InputCheckbox @bind-Value="userProfile.ReceiveGameAdvanceEmail" />
                </div>
                <ValidationMessage For="@(() => userProfile.ReceiveGameAdvanceEmail)" />
            </div>
            <div class="mb-3" style="color:red">@ValidationErrorMessage</div>
            <ValidationSummary />
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
                <a class="btn btn-light" @onclick="Cancel">Cancel</a>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        You are not authorized to view this page
    </NotAuthorized>
</AuthorizeView>
@code {

    private EditContext editContext;
    protected string Title = "Edit";
    protected UserProfileOverride userProfile = new();
    protected string ValidationErrorMessage = "";
    protected string originalEmailAddress = "This will populate on OnParametersSetAsync";
    protected override async Task OnParametersSetAsync()
    {
        userProfile.Id = Guid.Empty;
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if(authState.User.Identity?.IsAuthenticated == true){
            string userName = authState.User.Username();
            if(!string.IsNullOrEmpty(userName))
            {
                var _userProfiles = await adventureBotReadWriteService.UserProfileSearchAsync(userName);
                var _userProfile = _userProfiles.FirstOrDefault();
                if(_userProfile != null)
                {
                    userProfile.__T = _userProfile.__T;
                    userProfile.FirstName = _userProfile.FirstName;
                    userProfile.LastName = _userProfile.LastName;
                    userProfile.PreferredUsername = _userProfile.PreferredUsername;
                    userProfile.Email = _userProfile.Email;
                    originalEmailAddress = _userProfile.Email;
                    userProfile.ReceiveGameAdvanceEmail = _userProfile.ReceiveGameAdvanceEmail;
                    userProfile.EmailIsVerified = _userProfile.EmailIsVerified;
                    userProfile.Id = _userProfile.Id;
                    userProfile.GameEntryState = _userProfile.GameEntryState;
                }
            }
        }
    }
    protected override void OnInitialized()
    {
        editContext = new EditContext(userProfile);
    }
    protected async Task SaveUser()
    {
        if (!editContext.Validate()){
            ValidationErrorMessage = "The form is invalid";
            return;
        }
            
        if(userProfile.ReceiveGameAdvanceEmail && string.IsNullOrEmpty(userProfile.Email))
        {
            ValidationErrorMessage = "Email is required when Receive Email Notifications is checked";
        }
        else{
            ValidationErrorMessage = "";
        }
        if(!string.IsNullOrEmpty(userProfile.Email) && !ConstantsLib.IsValidEmail(userProfile.Email))
        {
            ValidationErrorMessage = "Email address is invalid";
        }
        if(!string.IsNullOrEmpty(ValidationErrorMessage))
        {
            return;
        }
        if(userProfile.Email != originalEmailAddress)
        {
            userProfile.EmailIsVerified = false;
        }
        if (userProfile.Id != Guid.Empty)
        {
            await adventureBotReadWriteService.UserProfilePutAsync((UserProfile)userProfile);
        }
        CheckStatusResponse response = await VerifyEmailAddressIfChanged();
        Cancel();
    }
    protected async Task<CheckStatusResponse> VerifyEmailAddressIfChanged()
    {
        if(
            !string.IsNullOrEmpty(userProfile.Email) && 
            !userProfile.EmailIsVerified
        )
        {
            EmailConfirmationInput input = new EmailConfirmationInput();
            input.Email = userProfile.Email;
            input.Name = userProfile.FirstName + " " + userProfile.LastName;
            return await adventureBotReadWriteService.EmailConfirmationPostAsync(input);
        }
        return null;
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("userprofile/view");
    }
}