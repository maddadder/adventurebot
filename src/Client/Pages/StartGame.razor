@page "/startgame"
@using AdventureBotUI.Client.Services
@using Read;
@inject NavigationManager NavigationManager
@inject AdventureBotReadService adventureBotReadService
@inject IJSRuntime JSRuntime

<h1>@Title</h1>
<hr />
@if(!HasSubmitted)
{
    <EditForm OnValidSubmit="SaveUser" EditContext="@editContext">
        <DataAnnotationsValidator />
        @foreach (var sub in initializeGameLoopInput.Subscriptions) 
        {
            <div class="mb-3">
                <label for="sub.Value" class="form-label">Party Member @(initializeGameLoopInput.Subscriptions.IndexOf(sub) + 1)</label>
                <div class="col-md-4">
                    <InputText  class="form-control" @bind-Value="sub.Value" placeholder="user@domain.com" />
                </div>
                <ValidationMessage For="@(() => sub.Value)" />
            </div>
        }
        <span @onclick="AddSubscription" style="text-decoration:underline;cursor:pointer">Add</span> | <span @onclick="DeleteSubscription" style="text-decoration:underline;cursor:pointer">Remove</span>
        <div>&#160;</div>
        <div class="mb-3">
            <label for="Wait24HoursToFinalizeDecision" class="form-label">Delay game response for 24 hours</label>
            <div class="col-md-4">
                <InputCheckbox @bind-Value="Wait24HoursToFinalizeDecision" />
            </div>
            <ValidationMessage For="@(() => Wait24HoursToFinalizeDecision)" />
        </div>
        <ValidationSummary />
        <div class="form-group">
            <button type="submit" disabled="@HasSubmitted" class="btn btn-primary">Submit</button>
        </div>
    </EditForm>
}
<div class="mb-3" style="color:red;margin-top:20px;">@ValidationErrorMessage</div>
@code {
    private EditContext editContext;
    protected string Title = "Start Game";
    protected InitializeGameLoopInputOverride initializeGameLoopInput = new();
    protected string ValidationErrorMessage = "";
    private bool Wait24HoursToFinalizeDecision = true;
    private bool HasSubmitted = false;
    protected override void OnInitialized()
    {
        editContext = new EditContext(initializeGameLoopInput);
        initializeGameLoopInput.Subscriptions = new List<GameLoopSubscription>(){
                    new GameLoopSubscription{
                        Value = ""
                    }
                };
    }
    
    protected async Task SaveUser()
    {
        ValidationErrorMessage = "";
        if (!editContext.Validate()){
            ValidationErrorMessage = "The form is invalid";
            return;
        }
        if(initializeGameLoopInput.Subscriptions == null || !initializeGameLoopInput.Subscriptions.Any())
        {
            ValidationErrorMessage = "Missing email address";
        }
        foreach(var sub in initializeGameLoopInput.Subscriptions)
        {
            if(string.IsNullOrEmpty(sub.Value) || !ConstantsLib.IsValidEmail(sub.Value))
            {
                ValidationErrorMessage = "Email address is invalid";
            }
        }
        if(!string.IsNullOrEmpty(ValidationErrorMessage))
        {
            return;
        }

        initializeGameLoopInput.InitialGameState = "begin";
        if(Wait24HoursToFinalizeDecision)
        {
            initializeGameLoopInput.GameDelay = "1.00:00:00.000";
        }
        else
        {
            initializeGameLoopInput.GameDelay = "0.00:05:00.000";
        }
        HasSubmitted = true;
        ValidationErrorMessage = "loading...";
        initializeGameLoopInput.Subscribers = initializeGameLoopInput.Subscriptions.Select(x => x.Value).ToList();
        CheckStatusResponse response = await adventureBotReadService.GameLoopPostAsync(initializeGameLoopInput);
        ValidationErrorMessage = "Your game is active. Please wait up to 20 minutes for your game to start.";
    }
    private void AddSubscription()
    {
        initializeGameLoopInput.Subscriptions.Add(new GameLoopSubscription()
        {
            Value=""
        });
    }
    private void DeleteSubscription()
    {
        if(initializeGameLoopInput.Subscriptions.Any())
        {
            initializeGameLoopInput.Subscriptions.RemoveAt(initializeGameLoopInput.Subscriptions.Count - 1);
        }
    }
}