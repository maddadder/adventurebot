@page "/"
@using AdventureBotUI.Client.Services
@using ReadWrite
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider authenticationStateProvider
@inject AdventureBotReadWriteService adventureBotReadWriteService
<PageTitle>Adventure Bot</PageTitle>

<h1>Adventure Bot</h1>

<h2>
    A workflow application that posts a daily email message for interactive 
    choose-your-own-adventure stories. 
</h2>
<h3>
    Account registration is required in order for the bot to send you a message. 
</h3>
<h4>
    You will need to login to advance the quest, unsubscribe, or change your email address.
</h4>
<AuthorizeView Roles="game.manage">
    <NotAuthorized Context="Auth">
        <h5>
            Click <a href="userprofile/register">here</a> to get started.
        </h5>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Roles="game.manage">
    <Authorized Context="Auth">
        @if(currentUser != null)
        {
            foreach(var claim in currentUser.Claims)
            {
                <div>@claim.Value</div>
                <div>@claim.Type</div>
            }
        }
        <input type="button" value="Start Game" @onclick="(() => StartGame())" class="btn btn-warning" />
    </Authorized>
</AuthorizeView>
@code{

    System.Security.Claims.ClaimsPrincipal currentUser;
    protected override async Task OnInitializedAsync()
    {
        /*
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if(authState.User.Identity?.IsAuthenticated == true)
        {
            currentUser = authState.User;
        }*/
    }
    protected async Task StartGame()
    {
        await adventureBotReadWriteService.StartGameGetAsync();
    }
}